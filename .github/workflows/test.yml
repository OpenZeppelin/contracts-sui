name: Lint and Test

on:
  push:
    branches: [main, v*]
  pull_request:

# Cancel in-progress runs on new pushes to the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  SUI_VERSION: "1.58.3"

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.set-matrix.outputs.packages }}
    steps:
      - name: Set package matrix
        id: set-matrix
        run: |
          PACKAGES='["contracts/access", "math/core"]'
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

      - name: Cache Sui binary
        id: cache-sui
        uses: actions/cache@v4
        with:
          path: ~/.local/bin/sui
          key: sui-${{ runner.os }}-${{ env.SUI_VERSION }}

      - name: Install Sui CLI from binary
        if: steps.cache-sui.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.local/bin
          curl -fLJ https://github.com/MystenLabs/sui/releases/download/mainnet-v${{ env.SUI_VERSION }}/sui-mainnet-v${{ env.SUI_VERSION }}-ubuntu-x86_64.tgz -o sui.tgz
          tar -xzf sui.tgz
          chmod +x sui
          mv sui ~/.local/bin/

      - name: Verify Sui installation
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          sui --version

#   lint:
#     name: Lint ${{ matrix.package }}
#     needs: setup
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         package: ${{ fromJson(needs.setup.outputs.packages) }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Restore Sui CLI
#         uses: ./.github/actions/restore-sui
#         with:
#           version: ${{ env.SUI_VERSION }}

#       - name: Lint
#         run: sui move build --lint --warnings-are-errors
#         working-directory: ./${{ matrix.package }}

#   build:
#     name: Build ${{ matrix.package }}
#     needs: [setup, lint]
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         package: ${{ fromJson(needs.setup.outputs.packages) }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Restore Sui CLI
#         uses: ./.github/actions/restore-sui
#         with:
#           version: ${{ env.SUI_VERSION }}

#       - name: Build
#         run: sui move build --skip-fetch-latest-git-deps
#         working-directory: ./${{ matrix.package }}

#   test:
#     name: Test ${{ matrix.package }}
#     needs: [setup, build]
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         package: ${{ fromJson(needs.setup.outputs.packages) }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Restore Sui CLI
#         uses: ./.github/actions/restore-sui
#         with:
#           version: ${{ env.SUI_VERSION }}

#       - name: Run tests
#         run: sui move test --coverage
#         working-directory: ./${{ matrix.package }}

#       - name: Enforce coverage threshold
#         run: |
#           sui move coverage summary --summarize-functions > coverage-report.txt
#           cat coverage-report.txt

#           # Extract coverage percentage more robustly
#           coverage=$(awk '/[0-9]+\.[0-9]+%/ {gsub(/%/, "", $NF); print $NF; exit}' coverage-report.txt)

#           if [ -z "$coverage" ]; then
#             echo "Error: Could not extract coverage percentage"
#             exit 1
#           fi

#           echo "Code coverage: $coverage%"

#           # Check threshold using awk (more portable than bc)
#           if awk "BEGIN {exit !($coverage < 90.0)}"; then
#             echo "❌ Error: Code coverage ($coverage%) is below required threshold of 90%"
#             exit 1
#           fi

#           echo "✅ Coverage threshold met: $coverage% >= 90%"
#         working-directory: ./${{ matrix.package }}
